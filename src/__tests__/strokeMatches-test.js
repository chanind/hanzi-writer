const ren = require('hanzi-writer-data/人.json');
const strokeMatches = require('../strokeMatches');
const Stroke = require('../models/Stroke');
const UserStroke = require('../models/UserStroke');
const CharDataParser = require('../CharDataParser');


const char = new CharDataParser().generateCharacter('人', ren);

describe('strokeMatches', () => {
  it('matches if the user stroke roughly matches the stroke medians', () => {
    const stroke = new Stroke('', [{x: 0, y: 0}, {x: 10, y: 50}], 0);

    const userStroke = new UserStroke(1, {x: 2, y: 1}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 5, y: 25}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 10, y: 51}, {x: 9999, y: 9999});

    expect(strokeMatches(userStroke, stroke)).toBe(true);
  });

  it('does not match if the user stroke is in the wrong direction', () => {
    const stroke = new Stroke('', [{x: 0, y: 0}, {x: 10, y: 50}], 0);

    const userStroke = new UserStroke(1, {x: 10, y: 51}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 5, y: 25}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 2, y: 1}, {x: 9999, y: 9999});

    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });

  it('does not match if the user stroke is too far away', () => {
    const stroke = new Stroke('', [{x: 0, y: 0}, {x: 10, y: 50}], 0);

    const userStroke = new UserStroke(1, {x: 2 + 200, y: 1 + 200}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 5 + 200, y: 25 + 200}, {x: 9999, y: 9999});
    userStroke.appendPoint({x: 10 + 200, y: 51 + 200}, {x: 9999, y: 9999});

    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });

  it('matches using real data 1', () => {
    const stroke = char.strokes[0];
    const userStroke = {
      points: [
        {x: 409.6, y: 746.4},
        {x: 409.6, y: 746.4},
        {x: 409.6, y: 746.4},
        {x: 409.6, y: 743.5555555555555},
        {x: 409.6, y: 735.0222222222222},
        {x: 409.6, y: 723.6444444444444},
        {x: 406.75555555555553, y: 709.4222222222222},
        {x: 401.06666666666666, y: 695.2},
        {x: 395.3777777777778, y: 675.2888888888889},
        {x: 392.53333333333336, y: 658.2222222222222},
        {x: 384, y: 635.4666666666667},
        {x: 378.31111111111113, y: 615.5555555555555},
        {x: 372.6222222222222, y: 592.8},
        {x: 366.93333333333334, y: 570.0444444444445},
        {x: 358.4, y: 547.2888888888889},
        {x: 347.02222222222224, y: 516},
        {x: 338.4888888888889, y: 498.93333333333334},
        {x: 335.64444444444445, y: 487.55555555555554},
        {x: 329.9555555555556, y: 476.1777777777778},
        {x: 324.26666666666665, y: 464.8},
        {x: 318.5777777777778, y: 450.5777777777778},
        {x: 312.8888888888889, y: 433.5111111111111},
        {x: 304.35555555555555, y: 422.1333333333333},
        {x: 295.8222222222222, y: 405.06666666666666},
        {x: 290.1333333333333, y: 393.68888888888887},
        {x: 287.2888888888889, y: 388},
        {x: 275.9111111111111, y: 370.93333333333334},
        {x: 273.06666666666666, y: 362.4},
        {x: 267.3777777777778, y: 353.8666666666667},
        {x: 261.68888888888887, y: 348.1777777777778},
        {x: 258.84444444444443, y: 342.4888888888889},
        {x: 256, y: 336.8},
        {x: 253.15555555555557, y: 333.9555555555556},
        {x: 247.46666666666667, y: 328.26666666666665},
        {x: 244.62222222222223, y: 325.4222222222222},
        {x: 241.77777777777777, y: 319.73333333333335},
        {x: 236.0888888888889, y: 314.0444444444444},
        {x: 233.24444444444444, y: 311.2},
        {x: 227.55555555555554, y: 305.5111111111111},
        {x: 224.7111111111111, y: 299.8222222222222},
        {x: 219.0222222222222, y: 294.1333333333333},
        {x: 210.48888888888888, y: 285.6},
        {x: 204.8, y: 279.9111111111111},
        {x: 196.26666666666668, y: 268.53333333333336},
        {x: 193.42222222222222, y: 265.68888888888887},
        {x: 182.04444444444445, y: 254.3111111111111},
        {x: 173.51111111111112, y: 245.77777777777777},
        {x: 167.82222222222222, y: 237.24444444444444},
        {x: 164.9777777777778, y: 234.4},
        {x: 156.44444444444446, y: 225.86666666666667},
        {x: 147.9111111111111, y: 220.17777777777778},
        {x: 142.22222222222223, y: 214.48888888888888},
        {x: 139.37777777777777, y: 211.64444444444445},
        {x: 130.84444444444443, y: 205.95555555555555},
        {x: 122.31111111111112, y: 200.26666666666668},
        {x: 119.46666666666667, y: 197.42222222222222},
        {x: 113.77777777777777, y: 194.57777777777778},
        {x: 110.93333333333334, y: 191.73333333333332},
        {x: 105.24444444444444, y: 188.88888888888889},
        {x: 99.55555555555556, y: 186.04444444444445},
        {x: 93.86666666666666, y: 180.35555555555555},
        {x: 88.17777777777778, y: 177.51111111111112},
        {x: 82.4888888888889, y: 171.82222222222222},
        {x: 76.8, y: 168.9777777777778},
        {x: 71.11111111111111, y: 166.13333333333333},
        {x: 68.26666666666667, y: 163.2888888888889},
        {x: 65.42222222222222, y: 157.6},
        {x: 62.577777777777776, y: 154.75555555555556},
        {x: 56.888888888888886, y: 154.75555555555556},
        {x: 56.888888888888886, y: 151.9111111111111},
        {x: 54.044444444444444, y: 151.9111111111111},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(true);
  });

  it('matches using real data 2', () => {
    const stroke = char.strokes[1];
    const userStroke = {
      points: [
        {x: 583.1111111111111, y: 516},
        {x: 583.1111111111111, y: 516},
        {x: 583.1111111111111, y: 516},
        {x: 585.9555555555555, y: 513.1555555555556},
        {x: 594.4888888888889, y: 501.77777777777777},
        {x: 620.0888888888888, y: 473.3333333333333},
        {x: 648.5333333333333, y: 436.35555555555555},
        {x: 691.2, y: 388},
        {x: 736.7111111111111, y: 333.9555555555556},
        {x: 790.7555555555556, y: 279.9111111111111},
        {x: 850.4888888888889, y: 217.33333333333334},
        {x: 890.3111111111111, y: 180.35555555555555},
        {x: 938.6666666666666, y: 137.6888888888889},
        {x: 975.6444444444444, y: 109.24444444444444},
        {x: 992.7111111111111, y: 97.86666666666666},
        {x: 998.4, y: 95.02222222222223},
        {x: 998.4, y: 95.02222222222223},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(true);
  });

  it('does not match using real data 1', () => {
    const stroke = char.strokes[0];
    const userStroke = {
      points: [
        {x: 133.6888888888889, y: 595.6444444444444},
        {x: 133.6888888888889, y: 595.6444444444444},
        {x: 136.53333333333333, y: 595.6444444444444},
        {x: 150.75555555555556, y: 595.6444444444444},
        {x: 199.11111111111111, y: 595.6444444444444},
        {x: 281.6, y: 595.6444444444444},
        {x: 392.53333333333336, y: 595.6444444444444},
        {x: 475.02222222222224, y: 595.6444444444444},
        {x: 546.1333333333333, y: 595.6444444444444},
        {x: 588.8, y: 595.6444444444444},
        {x: 608.7111111111111, y: 595.6444444444444},
        {x: 614.4, y: 595.6444444444444},
        {x: 617.2444444444444, y: 595.6444444444444},
        {x: 620.0888888888888, y: 595.6444444444444},
        {x: 620.0888888888888, y: 595.6444444444444},
        {x: 620.0888888888888, y: 595.6444444444444},
        {x: 620.0888888888888, y: 595.6444444444444},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });

  it('does not match using real data 2', () => {
    const stroke = char.strokes[0];
    const userStroke = {
      points: [
        {x: 31.288888888888888, y: 285.6},
        {x: 28.444444444444443, y: 285.6},
        {x: 34.13333333333333, y: 288.44444444444446},
        {x: 54.044444444444444, y: 302.6666666666667},
        {x: 102.4, y: 333.9555555555556},
        {x: 201.95555555555555, y: 393.68888888888887},
        {x: 287.2888888888889, y: 450.5777777777778},
        {x: 386.84444444444443, y: 516},
        {x: 452.26666666666665, y: 555.8222222222222},
        {x: 506.31111111111113, y: 584.2666666666667},
        {x: 560.3555555555556, y: 612.7111111111111},
        {x: 603.0222222222222, y: 635.4666666666667},
        {x: 642.8444444444444, y: 658.2222222222222},
        {x: 676.9777777777778, y: 678.1333333333333},
        {x: 705.4222222222222, y: 692.3555555555556},
        {x: 719.6444444444444, y: 698.0444444444445},
        {x: 725.3333333333334, y: 700.8888888888889},
        {x: 728.1777777777778, y: 703.7333333333333},
        {x: 733.8666666666667, y: 706.5777777777778},
        {x: 733.8666666666667, y: 706.5777777777778},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });

  it('does not match using real data 3', () => {
    const stroke = char.strokes[0];
    const userStroke = {
      points: [
        {x: 395.3777777777778, y: 712.2666666666667},
        {x: 395.3777777777778, y: 712.2666666666667},
        {x: 395.3777777777778, y: 703.7333333333333},
        {x: 395.3777777777778, y: 692.3555555555556},
        {x: 395.3777777777778, y: 686.6666666666666},
        {x: 392.53333333333336, y: 672.4444444444445},
        {x: 386.84444444444443, y: 658.2222222222222},
        {x: 384, y: 646.8444444444444},
        {x: 381.15555555555557, y: 635.4666666666667},
        {x: 378.31111111111113, y: 626.9333333333333},
        {x: 375.46666666666664, y: 621.2444444444444},
        {x: 372.6222222222222, y: 615.5555555555555},
        {x: 372.6222222222222, y: 615.5555555555555},
        {x: 372.6222222222222, y: 612.7111111111111},
        {x: 369.77777777777777, y: 612.7111111111111},
        {x: 369.77777777777777, y: 612.7111111111111},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });

  it('does not match using real data 4', () => {
    const stroke = char.strokes[0];
    const userStroke = {
      points: [
        {x: 961.4222222222222, y: 680.9777777777778},
        {x: 961.4222222222222, y: 680.9777777777778},
        {x: 961.4222222222222, y: 680.9777777777778},
        {x: 961.4222222222222, y: 678.1333333333333},
        {x: 961.4222222222222, y: 675.2888888888889},
        {x: 961.4222222222222, y: 669.6},
        {x: 955.7333333333333, y: 655.3777777777777},
        {x: 952.8888888888889, y: 638.3111111111111},
        {x: 944.3555555555556, y: 615.5555555555555},
        {x: 935.8222222222222, y: 587.1111111111111},
        {x: 924.4444444444445, y: 555.8222222222222},
        {x: 913.0666666666667, y: 524.5333333333333},
        {x: 896, y: 473.3333333333333},
        {x: 881.7777777777778, y: 427.8222222222222},
        {x: 873.2444444444444, y: 393.68888888888887},
        {x: 864.7111111111111, y: 368.0888888888889},
        {x: 844.8, y: 305.5111111111111},
        {x: 836.2666666666667, y: 268.53333333333336},
        {x: 822.0444444444445, y: 231.55555555555554},
        {x: 810.6666666666666, y: 203.11111111111111},
        {x: 802.1333333333333, y: 177.51111111111112},
        {x: 790.7555555555556, y: 154.75555555555556},
        {x: 782.2222222222222, y: 134.84444444444443},
        {x: 773.6888888888889, y: 117.77777777777777},
        {x: 765.1555555555556, y: 103.55555555555556},
        {x: 756.6222222222223, y: 86.4888888888889},
        {x: 750.9333333333333, y: 77.95555555555555},
        {x: 745.2444444444444, y: 69.42222222222222},
        {x: 742.4, y: 63.733333333333334},
        {x: 739.5555555555555, y: 63.733333333333334},
        {x: 739.5555555555555, y: 60.888888888888886},
        {x: 739.5555555555555, y: 60.888888888888886},
        {x: 736.7111111111111, y: 60.888888888888886},
        {x: 736.7111111111111, y: 60.888888888888886},
        {x: 736.7111111111111, y: 60.888888888888886},
        {x: 733.8666666666667, y: 60.888888888888886},
        {x: 733.8666666666667, y: 60.888888888888886},
        {x: 733.8666666666667, y: 60.888888888888886},
        {x: 733.8666666666667, y: 60.888888888888886},
        {x: 733.8666666666667, y: 63.733333333333334},
        {x: 733.8666666666667, y: 63.733333333333334},
        {x: 733.8666666666667, y: 63.733333333333334},
        {x: 733.8666666666667, y: 66.57777777777778},
        {x: 733.8666666666667, y: 66.57777777777778},
      ],
    };
    expect(strokeMatches(userStroke, stroke)).toBe(false);
  });
});
